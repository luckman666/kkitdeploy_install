"""
Django settings for kkitDeploy project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os ,redis
#from kkitDeploy.conf import *
from .conf import *
from channels.routing import ProtocolTypeRouter
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'b*k61sf*3+#9o52j840y$0_j%aa&(gs-%^deyj$u(53n9weleg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_jwt',
    'apps.deploy',
    'apps.utils',
    'channels',
    # 'django_crontab',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 拦截请求，设置session到request
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 跨域设置
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 再次拦截请求，判断是否有session(上面已加入)，设置user到request
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]
#WEBSOCKET_ACCEPT_ALL=True
# 允许跨域访问的域名
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


CORS_ORIGIN_REGEX_WHITELIST = ()
# 跨域允许的方法
CORS_ALLOW_METHODS = (
'GET',
'POST',
'PUT',
'PATCH',
'DELETE',
'OPTIONS'
)
# 跨域允许的header
CORS_ALLOW_HEADERS = (
'x-requested-with',
'content-type',
'accept',
'origin',
'authorization',
'x-csrftoken'
)
#配置end


ROOT_URLCONF = 'kkitDeploy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kkitDeploy.wsgi.application'




AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



redisPool = redis.ConnectionPool(
    host=REDIS_HOST,
    port=REDIS_PORT,
    db=0,
    password=REDIS_PASSWD)


CACHES = {
    "default": {
        # 引擎
        "BACKEND": "django_redis.cache.RedisCache",
        # 缓存超时时间（默认300，None表示永不过期，0表示立即过期）
        'TIMEOUT': None,
        "LOCATION": "redis://"+REDIS_HOST+":"+REDIS_PORT+"/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWD,
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
        }
    }
}



# Redis配置
# REDIS_HOST = ENV_DICT.get('REDIS_HOST', '127.0.0.1')
# REDIS_PORT = ENV_DICT.get('REDIS_PORT', 6379)
CHANNEL_LAYERS = {
  "default": {
    "BACKEND": "channels_redis.core.RedisChannelLayer",
    "CONFIG": {
      "hosts": ["redis://:"+REDIS_PASSWD+"@"+REDIS_HOST+":"+REDIS_PORT+"/1"],
    },
    # "ROUTING":"kkitDeploy.routing.channel_routing" ,
  },
}



ASGI_APPLICATION = "kkitDeploy.routing.application"

STATIC_URL = '/static/'
FileUploadDir = os.path.join(BASE_DIR,'uploadPath/')
scriptBasePath = os.path.join(BASE_DIR,'apps/utils/api/')
sendScriptBasePath = os.path.join(scriptBasePath,'execute_deploy/')
sendScript = os.path.join(scriptBasePath,'execute_deploy/execute_deploy.sh')
scriptPackage=os.path.join(scriptBasePath,'kkitDeployScriptPackage/')
updateScriptPackage=os.path.join(scriptPackage,'updateScript.sh')
RSA_PRIVATE_KEY_FILE='/root/.ssh/id_rsa'
# gitBaseUrl='https://api.github.com/users/luckman666/repos'
gitBaseUrl='https://gitee.com/yb2018/kkitDeployScriptPackage.git'
checkPortPath = os.path.join(scriptBasePath,'portScanner/')

# CRONJOBS = [
#     ('30 6 * * 1', updateScriptPackage)
# ]
